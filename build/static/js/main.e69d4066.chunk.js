(this["webpackJsonpclouds-demo-15012021"]=this["webpackJsonpclouds-demo-15012021"]||[]).push([[0],{34:function(e,n,r){},38:function(e,n,r){"use strict";r.r(n);var t=r(4),o=r(2),a=r.n(o),i=r(23),c=r.n(i),s=(r(34),r(8)),u=r(16),l=r(29),m=r(12),d=r(24),v=(r(10),r(25)),f=r(0),j={uniforms:{tDiffuse:{value:null},uResolution:{value:null},uTime:{value:null},camPos:{value:null},cameraWorldMatrix:{value:null},cameraProjectionMatrixInverse:{value:null}},vertexShader:"\n \n  void main() {\n   \n   \n    vec4 modelViewPosition = modelViewMatrix * vec4(position , 1.0);\n     gl_Position = projectionMatrix * modelViewPosition;     \n\n\n  }\n  ",fragmentShader:"\n  uniform vec3 camPos;\n  uniform vec2 uResolution;\n  uniform sampler2D tDiffuse;\n  uniform float uTime;\n  uniform mat4 cameraWorldMatrix;\n  uniform mat4 cameraProjectionMatrixInverse;\n\n  float sphereSDF (vec3 position, vec3 origin, float radius) {\n    return length(origin-position) - radius;\n  }\n\n \nvoid main()\n{\nvec2 p = gl_FragCoord.xy / uResolution.xy;\n\nvec2 screenPos = ( gl_FragCoord.xy * 2.0 - uResolution.xy ) / min( uResolution.x, uResolution.y );\n// convert ray direction from screen coordinate to world coordinate\nvec3 ray = (cameraWorldMatrix * cameraProjectionMatrixInverse * vec4( screenPos.xy, 1.0, 1.0 )).xyz;\nray = normalize( ray );\n// camera position\nvec3 cPos = camPos;\n\n  // Ray Marching Variables\n  vec3 ro = cPos;  //ray's origin\n  //varying mat4 projectionMatrix;\n //varying mat4 viewMatInverted;\n \n  vec3 rd =ray;\n  vec3 sphereOirgin =  vec3(0.30);\n \n  vec3 sum = ( vec4(texture(tDiffuse, p.xy).xyz,1.0)).xyz;\n  float t = 0.0;\n\n \n  \n\n  \nfloat MAX_DISTANCE = 400.0;\n  \nfor (int i = 0; i< 500;i ++) {\n    vec3 currentStep = ro + rd* t ;\n\n  float dist = sphereSDF(currentStep,sphereOirgin, .10);\n\n\n  if (dist < 0.0000 ) {\n    sum = vec3(1.0);\n    \n  }\n  if (t > MAX_DISTANCE) {\n    \n    break;\n  }\n  t += dist < 0.000001 ? 0.1 : 0.06; \n  \n}\n  \n      \n      \n          gl_FragColor = vec4(sum.xyz, 1.0);\n      \n\n}\n  "};Object(s.b)({EffectComposer:l.a,ShaderPass:m.a,SavePass:d.a,RenderPass:v.a});var x=function(){var e=Object(o.useRef)(),n=(Object(o.useRef)(),Object(o.useRef)()),r=(Object(o.useRef)(!1),Object(s.d)()),a=r.scene,i=r.gl,c=r.size,u=r.camera,l=r.clock;return Object(o.useEffect)((function(){return e.current.setSize(c.width,c.height)}),[c]),Object(s.c)((function(){if(n.current){(new f.Matrix4).copy(u.matrixWorld),n.current.uniforms.uResolution.value=new f.Vector2(c.width,c.height),n.current.uniforms.uTime.value=l.elapsedTime,n.current.uniforms.camPos.value=(new f.Vector3).copy(u.position),n.current.uniforms.cameraWorldMatrix.value=u.matrixWorld,n.current.uniforms.cameraProjectionMatrixInverse.value=(new f.Matrix4).copy(u.projectionMatrix).invert();var r=(new f.Vector3).copy(u.position);console.log({pos:r.x})}u.updateProjectionMatrix();Date.now();e.current.render()}),1),console.log({camera:u}),console.log({clock:l}),Object(t.jsxs)("effectComposer",{ref:e,args:[i],children:[Object(t.jsx)("renderPass",{attachArray:"passes",scene:a,camera:u}),Object(t.jsx)("shaderPass",{attachArray:"passes",ref:n,args:[j],needsSwap:!1,renderToScreen:!0})]})};Object(s.b)({OrbitControls:u.a});var g=function(){var e=Object(s.d)(),n=e.camera,r=e.gl.domElement;return Object(t.jsxs)(t.Fragment,{children:[Object(t.jsx)("orbitControls",{args:[n,r]}),Object(t.jsx)(x,{}),Object(t.jsx)("gridHelper",{args:[10,10,"pink","black"]})]})};Object(s.b)({OrbitControls:u.a});var p=function(){return Object(t.jsx)("div",{style:{height:"100vh",width:"100vw"},children:Object(t.jsx)(s.a,{shadowMap:!0,colorManagement:!0,camera:{position:[-4,4,-4],far:50},style:{background:"#FFFFFF"},concurrent:!0,children:Object(t.jsx)(g,{})})})},b=function(e){e&&e instanceof Function&&r.e(3).then(r.bind(null,39)).then((function(n){var r=n.getCLS,t=n.getFID,o=n.getFCP,a=n.getLCP,i=n.getTTFB;r(e),t(e),o(e),a(e),i(e)}))};c.a.render(Object(t.jsx)(a.a.StrictMode,{children:Object(t.jsx)(p,{})}),document.getElementById("root")),b()}},[[38,1,2]]]);
//# sourceMappingURL=main.e69d4066.chunk.js.map