{"version":3,"sources":["effects/clouds/index.js","effects/index.js","map/index.js","App.js","reportWebVitals.js","index.js"],"names":["clouds","uniforms","tDiffuse","value","uResolution","uTime","camPos","cameraWorldMatrix","cameraProjectionMatrixInverse","vertexShader","fragmentShader","extend","EffectComposer","ShaderPass","SavePass","RenderPass","Effects","composer","useRef","cloudsPass","useThree","scene","gl","size","camera","clock","useEffect","current","setSize","width","height","useFrame","THREE","copy","matrixWorld","elapsedTime","position","projectionMatrix","invert","pos","console","log","x","updateProjectionMatrix","Date","now","render","ref","args","attachArray","needsSwap","renderToScreen","OrbitControls","Map","domElement","App","style","shadowMap","colorManagement","far","background","concurrent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"iRAAaA,EAAS,CACpBC,SAAU,CACRC,SAAU,CAAEC,MAAO,MACnBC,YAAa,CAAED,MAAO,MACtBE,MAAO,CAAEF,MAAO,MAChBG,OAAQ,CAAEH,MAAO,MACjBI,kBAAmB,CAACJ,MAAO,MAC3BK,8BAA+B,CAACL,MAAO,OAGzCM,aAAa,mLAWbC,eAAe,83CCVjBC,YAAO,CAAEC,mBAAgBC,eAAYC,aAAUC,iBAE/C,IAkDeC,EAhDC,WAEd,IAAMC,EAAWC,mBAEXC,GADWD,mBACEA,oBAJC,GAKPA,kBAAO,GACuBE,eAAnCC,EANY,EAMZA,MAAOC,EANK,EAMLA,GAAIC,EANC,EAMDA,KAAMC,EANL,EAMKA,OAAQC,EANb,EAMaA,MAiCjC,OA3BAC,qBAAU,kBAAMT,EAASU,QAAQC,QAAQL,EAAKM,MAAON,EAAKO,UAAS,CAACP,IACpEQ,aAAS,WACP,GAAIZ,EAAWQ,QAAS,EACd,IAAIK,WACVC,KAAKT,EAAOU,aAEdf,EAAWQ,QAAQ1B,SAAnB,YAA2CE,MAAQ,IAAI6B,UAAcT,EAAKM,MAAON,EAAKO,QACtFX,EAAWQ,QAAQ1B,SAAnB,MAAqCE,MAAQsB,EAAMU,YACnDhB,EAAWQ,QAAQ1B,SAAnB,OAAsCE,OAAQ,IAAI6B,WAAgBC,KAAKT,EAAOY,UAC9EjB,EAAWQ,QAAQ1B,SAAnB,kBAAiDE,MAAQqB,EAAOU,YAChEf,EAAWQ,QAAQ1B,SAAnB,8BAA6DE,OAAQ,IAAI6B,WAAgBC,KAAKT,EAAOa,kBAAkBC,SAIvH,IAAMC,GAAM,IAAIP,WAAgBC,KAAKT,EAAOY,UAC5CI,QAAQC,IAAI,CAAEF,IAAKA,EAAIG,IAGzBlB,EAAOmB,yBACKC,KAAKC,MAIjB5B,EAASU,QAAQmB,WAChB,GACHN,QAAQC,IAAI,CAAEjB,WACdgB,QAAQC,IAAI,CAAEhB,UAEZ,iCAAgBsB,IAAK9B,EAAU+B,KAAM,CAAC1B,GAAtC,UACE,4BAAY2B,YAAY,SAAS5B,MAAOA,EAAOG,OAAQA,IACvD,4BAAYyB,YAAY,SAASF,IAAK5B,EAAY6B,KAAM,CAAChD,GAASkD,WAAW,EAAOC,gBAAc,QCnDxGxC,YAAO,CAAEyC,oBAET,IAgBeC,EAhBH,WAAO,IAAD,EAIZjC,cAFFI,EAFc,EAEdA,OACM8B,EAHQ,EAGdhC,GAAMgC,WAER,OACE,qCACI,+BAAeN,KAAM,CAACxB,EAAQ8B,KAC9B,cAAC,EAAD,IACA,4BAAYN,KAAM,CAAC,GAAI,GAAL,sBCX1BrC,YAAO,CAAEyC,oBAsBMG,MApBf,WAEE,OACE,qBAAKC,MAAO,CAAC1B,OAAQ,QAASD,MAAO,SAArC,SACE,cAAC,IAAD,CACE4B,WAAS,EACTC,iBAAe,EACflC,OAAQ,CAAEY,SAAU,EAAE,EAAG,GAAI,GAAIuB,IAAK,IACtCH,MAAO,CACLI,WAAY,WAEdC,YAAU,EAPZ,SASE,cAAC,EAAD,SCTOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASzB,OACP,cAAC,IAAM0B,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e69d4066.chunk.js","sourcesContent":["export const clouds = {\r\n  uniforms: {\r\n    tDiffuse: { value: null },\r\n    uResolution: { value: null },\r\n    uTime: { value: null },\r\n    camPos: { value: null },\r\n    cameraWorldMatrix: {value: null},\r\n    cameraProjectionMatrixInverse: {value: null},\r\n   \r\n  },\r\n  vertexShader: `\r\n \r\n  void main() {\r\n   \r\n   \r\n    vec4 modelViewPosition = modelViewMatrix * vec4(position , 1.0);\r\n     gl_Position = projectionMatrix * modelViewPosition;     \r\n\r\n\r\n  }\r\n  `,\r\n  fragmentShader: `\r\n  uniform vec3 camPos;\r\n  uniform vec2 uResolution;\r\n  uniform sampler2D tDiffuse;\r\n  uniform float uTime;\r\n  uniform mat4 cameraWorldMatrix;\r\n  uniform mat4 cameraProjectionMatrixInverse;\r\n\r\n  float sphereSDF (vec3 position, vec3 origin, float radius) {\r\n    return length(origin-position) - radius;\r\n  }\r\n\r\n \r\nvoid main()\r\n{\r\nvec2 p = gl_FragCoord.xy / uResolution.xy;\r\n\r\nvec2 screenPos = ( gl_FragCoord.xy * 2.0 - uResolution.xy ) / min( uResolution.x, uResolution.y );\r\n// convert ray direction from screen coordinate to world coordinate\r\nvec3 ray = (cameraWorldMatrix * cameraProjectionMatrixInverse * vec4( screenPos.xy, 1.0, 1.0 )).xyz;\r\nray = normalize( ray );\r\n// camera position\r\nvec3 cPos = camPos;\r\n\r\n  // Ray Marching Variables\r\n  vec3 ro = cPos;  //ray's origin\r\n  //varying mat4 projectionMatrix;\r\n //varying mat4 viewMatInverted;\r\n \r\n  vec3 rd =ray;\r\n  vec3 sphereOirgin =  vec3(0.30);\r\n \r\n  vec3 sum = ( vec4(texture(tDiffuse, p.xy).xyz,1.0)).xyz;\r\n  float t = 0.0;\r\n\r\n \r\n  \r\n\r\n  \r\nfloat MAX_DISTANCE = 400.0;\r\n  \r\nfor (int i = 0; i< 500;i ++) {\r\n    vec3 currentStep = ro + rd* t ;\r\n\r\n  float dist = sphereSDF(currentStep,sphereOirgin, .10);\r\n\r\n\r\n  if (dist < 0.0000 ) {\r\n    sum = vec3(1.0);\r\n    \r\n  }\r\n  if (t > MAX_DISTANCE) {\r\n    \r\n    break;\r\n  }\r\n  t += dist < 0.000001 ? 0.1 : 0.06; \r\n  \r\n}\r\n  \r\n      \r\n      \r\n          gl_FragColor = vec4(sum.xyz, 1.0);\r\n      \r\n\r\n}\r\n  `\r\n}","import React, { useRef, useEffect } from 'react';\r\nimport { useThree, useFrame, extend } from 'react-three-fiber'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { SavePass } from 'three/examples/jsm/postprocessing/SavePass'\r\nimport { CopyShader } from 'three/examples/jsm/shaders/CopyShader'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport * as THREE from 'three';\r\n\r\nimport { clouds } from './clouds';\r\n\r\nextend({ EffectComposer, ShaderPass, SavePass, RenderPass })\r\n\r\nconst glsl = (x) => x\r\n\r\nconst Effects = () => {\r\n\r\n  const composer = useRef()\r\n  const savePass = useRef()\r\n  const cloudsPass = useRef()\r\n  const swap = useRef(false) // Whether to swap the delay buffers\r\n  const { scene, gl, size, camera, clock } = useThree()\r\n  // const { rtA, rtB } = useMemo(() => {\r\n  //   const rtA = new THREE.WebGLRenderTarget(size.width, size.height)\r\n  //   const rtB = new THREE.WebGLRenderTarget(size.width, size.height)\r\n  //   return { rtA, rtB }\r\n  // }, [size])\r\n  useEffect(() => composer.current.setSize(size.width, size.height), [size])\r\n  useFrame(() => {\r\n    if (cloudsPass.current) {\r\n      var m = new THREE.Matrix4();\r\n      m.copy(camera.matrixWorld);\r\n\r\n      cloudsPass.current.uniforms['uResolution'].value = new THREE.Vector2(size.width, size.height);\r\n      cloudsPass.current.uniforms['uTime'].value = clock.elapsedTime;\r\n      cloudsPass.current.uniforms['camPos'].value = new THREE.Vector3().copy(camera.position);\r\n      cloudsPass.current.uniforms['cameraWorldMatrix'].value = camera.matrixWorld;\r\n      cloudsPass.current.uniforms['cameraProjectionMatrixInverse'].value = new THREE.Matrix4().copy(camera.projectionMatrix).invert();\r\n\r\n\r\n      //  console.log({cameraPos: camera.position.x});\r\n      const pos = new THREE.Vector3().copy(camera.position);\r\n      console.log({ pos: pos.x })\r\n    }\r\n    // console.log({camera})\r\n    camera.updateProjectionMatrix();\r\n    var speed = Date.now() * 0.00025;\r\n    // camera.position.x = Math.cos(speed) * 10;\r\n    // camera.position.z = Math.sin(speed) * 10;\r\n    // camera.lookAt(new THREE.Vector3(0.0,0))\r\n    composer.current.render()\r\n  }, 1);\r\n  console.log({ camera });\r\n  console.log({ clock });\r\n  return (\r\n    <effectComposer ref={composer} args={[gl]}>\r\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\r\n      <shaderPass attachArray=\"passes\" ref={cloudsPass} args={[clouds]} needsSwap={false} renderToScreen />\r\n\r\n    </effectComposer>\r\n  )\r\n}\r\n\r\nexport default Effects;","import React from \"react\";\r\nimport { extend, useThree } from 'react-three-fiber'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\nimport Effects from '../effects';\r\n\r\nextend({ OrbitControls })\r\n\r\nconst Map = () => {\r\n  const {\r\n    camera,\r\n    gl: { domElement }\r\n  } = useThree()\r\n  return (\r\n    <>  \r\n        <orbitControls args={[camera, domElement]} />\r\n        <Effects />\r\n        <gridHelper args={[10, 10, `pink`, `black`]} />\r\n       \r\n    </>\r\n    \r\n  );\r\n}\r\n\r\nexport default Map;","import React, { Suspense } from \"react\";\nimport { Canvas, extend, useThree } from 'react-three-fiber'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nimport Map from './map';\n\nextend({ OrbitControls })\n\nfunction App() {\n\n  return (\n    <div style={{height: '100vh', width: '100vw'}}>\n      <Canvas\n        shadowMap\n        colorManagement\n        camera={{ position: [-4, 4, -4], far: 50 }}\n        style={{\n          background: \"#FFFFFF\",\n        }}\n        concurrent\n      >\n        <Map />\n      </Canvas>\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}